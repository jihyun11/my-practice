name: Java CI with Gradle

# master 브랜치에 push, PR 이벤트 발생시 동작.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # jdk 17 설치
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Spring Boot 어플리케이션 Build (1)
      - name: Spring Boot Build
        run: ./gradlew clean build --exclude-task test

      # Docker 이미지 Build (2)
      - name: docker image build
        run: docker build -t kjh012713/mypractice .

      # DockerHub Login (3)
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker Hub push (4)
      - name: docker Hub push
        run: docker push kjh012713/mypractice
  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
      - name: SSH to EC2 and run Docker commands
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Optional: login to DockerHub if authentication is required
            echo $DOCKERHUB_TOKEN | sudo docker login --username $DOCKERHUB_USERNAME --password-stdin

            # Pull the Docker image from DockerHub
            sudo docker pull kjh012713/mypractice

            # Stop and remove the existing container if it exists
            sudo docker stop my-container || true
            sudo docker rm my-container || true
            ###
            # Run the new container
            sudo docker run -d --name my-container -p 8080:8080 kjh012713/mypractice
          EOF
